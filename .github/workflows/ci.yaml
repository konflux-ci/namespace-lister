name: Lint checks

on: # yamllint disable-line rule:truthy
  pull_request: {}
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Determine Go version
        id: go_version
        run: |
          echo "version=$(go mod edit -json | jq -r '.Go')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.version }}

      - name: Run tests
        env:
          GINKGO: go run github.com/onsi/ginkgo/v2/ginkgo
          GINKGO_ARGS: --race --github-output
        run: make test

  performance-tests:
    name: Run performance tests
    runs-on: ubuntu-24.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - uses: kubernetes-sigs/kwok@main
        with:
          command: 'kwokctl'

      - name: Set up kwokctl
        uses: kubernetes-sigs/kwok@main
        with:
          command: kwokctl

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          GINKGO="go run github.com/onsi/ginkgo/v2/ginkgo --github-output" make test-perf

  acceptance:
    name: Run acceptance tests
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - proxy: dumb-proxy
          - proxy: smart-proxy

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Determine Go version
        id: go_version
        run: |
          echo "version=$(go mod edit -json | jq -r '.Go')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.version }}

      - name: Run tests
        env:
          IMAGE_BUILDER: docker
          IMG: namespace-lister:pr-${{ github.event.pull_request.number }}
        run: |
          echo "##[group] Preparing environment"
            make -C "acceptance/test/${{ matrix.proxy }}" prepare
          echo "##[endgroup]"
          echo "##[group] Running tests"
            make -C "acceptance/test/${{ matrix.proxy }}" test
          echo "##[endgroup]"

  go-tidy:
    name: Tidy go mod
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Determine Go version
        id: go_version
        run: |
          echo "version=$(go mod edit -json | jq -r '.Go')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.version }}

      - name: Ensure go.mod is tidy
        env:
          SHA_FILE: ${{ runner.temp }}/go_mod_shas.txt"
        run: |
          # generate sha512 for go mod files
          sha512sum go.mod go.sum > "${SHA_FILE}"

          # run go mod tidy
          go mod tidy -v

          # check files were left untouched
          sha512sum -c "${SHA_FILE}"
          if [ "$?" != 0 ]; then
            printf "please run go mod tidy to tidy the go.mod\n\n%s\n" "${output}"
            exit 1
          fi

  lint-go:
    name: Lint code
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Determine Go version
        id: go_version
        run: |
          echo "version=$(go mod edit -json | jq -r '.Go')" >> $GITHUB_OUTPUT

      - name: Determine golang-ci version
        id: golangci_version
        run: |
          echo "version=$(go mod edit -json hack/tools/golang-ci/go.mod | \
            jq -r '.Require | map(select(.Path == "github.com/golangci/golangci-lint"))[].Version')" \
            >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.version }}

      - name: Lint with golang-ci
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ steps.golangci_version.outputs.version }}
          args: --timeout=5m

  lint-yaml:
    name: Lint yaml manifests
    runs-on: ubuntu-24.04

    steps:
      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Lint with yamllint
        run: make lint-yaml
