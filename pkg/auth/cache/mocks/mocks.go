// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_test.go
//
// Generated by this command:
//
//	mockgen -source=interfaces_test.go -destination=mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
	authorizer "k8s.io/apiserver/pkg/authorization/authorizer"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSubjectLocator is a mock of SubjectLocator interface.
type MockSubjectLocator struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectLocatorMockRecorder
	isgomock struct{}
}

// MockSubjectLocatorMockRecorder is the mock recorder for MockSubjectLocator.
type MockSubjectLocatorMockRecorder struct {
	mock *MockSubjectLocator
}

// NewMockSubjectLocator creates a new mock instance.
func NewMockSubjectLocator(ctrl *gomock.Controller) *MockSubjectLocator {
	mock := &MockSubjectLocator{ctrl: ctrl}
	mock.recorder = &MockSubjectLocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectLocator) EXPECT() *MockSubjectLocatorMockRecorder {
	return m.recorder
}

// AllowedSubjects mocks base method.
func (m *MockSubjectLocator) AllowedSubjects(attributes authorizer.Attributes) ([]v1.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowedSubjects", attributes)
	ret0, _ := ret[0].([]v1.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowedSubjects indicates an expected call of AllowedSubjects.
func (mr *MockSubjectLocatorMockRecorder) AllowedSubjects(attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedSubjects", reflect.TypeOf((*MockSubjectLocator)(nil).AllowedSubjects), attributes)
}

// MockClientReader is a mock of ClientReader interface.
type MockClientReader struct {
	ctrl     *gomock.Controller
	recorder *MockClientReaderMockRecorder
	isgomock struct{}
}

// MockClientReaderMockRecorder is the mock recorder for MockClientReader.
type MockClientReaderMockRecorder struct {
	mock *MockClientReader
}

// NewMockClientReader creates a new mock instance.
func NewMockClientReader(ctrl *gomock.Controller) *MockClientReader {
	mock := &MockClientReader{ctrl: ctrl}
	mock.recorder = &MockClientReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientReader) EXPECT() *MockClientReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClientReader) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientReaderMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientReader)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockClientReader) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientReaderMockRecorder) List(ctx, list any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientReader)(nil).List), varargs...)
}
